{"version":3,"sources":["images/bg-moon.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","backgroundImage","require","target","href","icon","faFacebookF","faTwitter","faYoutube","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,qC,uGC6C5BC,MArCf,WACE,OACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,wDAAwDC,MAAO,CAAEC,gBAAiB,OAASC,EAAQ,IAA0B,MAC1I,yBAAKH,UAAU,0CAKjB,yBAAKA,UAAU,gEACb,yBAAKA,UAAU,iBACb,6CAGA,uBAAGA,UAAU,kBAAb,YACW,0BAAMA,UAAU,WAAhB,WAIb,yBAAKA,UAAU,UACb,uBAAGI,OAAO,SAASC,KAAK,IAAIL,UAAU,0CACpC,kBAAC,IAAD,CAAiBM,KAAMC,OAGzB,uBAAGH,OAAO,SAASC,KAAK,qCAAqCL,UAAU,0CACrE,kBAAC,IAAD,CAAiBM,KAAME,OAGzB,uBAAGJ,OAAO,SAASC,KAAK,2DAA2DL,UAAU,0CAC3F,kBAAC,IAAD,CAAiBM,KAAMG,WCzBfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0705166d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-moon.ec670727.jpg\";","import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFacebookF } from '@fortawesome/free-brands-svg-icons';\nimport { faYoutube } from '@fortawesome/free-brands-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\n\nfunction App() {\n  return (\n    <div className=\"size1 bg0 where1-parent\">\n      <div className=\"flex-c-m bg-img1 size2 where1 overlay1 where2 respon2\" style={{ backgroundImage: 'url(' + require('./images/bg-moon.jpg') + ')' }}>\n        <div className=\"wsize2 flex-w flex-c-m cd100 js-tilt\">\n\n        </div>\n      </div>\n\n      <div className=\"size3 flex-col-sb flex-w p-l-75 p-r-75 p-t-45 p-b-45 respon1\">\n        <div className=\"p-t-50 p-b-60\">\n          <div>\n            Coming Soon!\n\t\t\t\t\t\t</div>\n          <p className=\"m1-txt1 p-b-36\">\n            Moonlight<span className=\"m1-txt2\">Stack</span>\n          </p>\n        </div>\n\n        <div className=\"flex-w\">\n          <a target=\"_blank\" href=\"#\" className=\"flex-c-m size5 bg3 how1 trans-04 m-r-5\">\n            <FontAwesomeIcon icon={faFacebookF} />\n          </a>\n\n          <a target=\"_blank\" href=\"https://twitter.com/moonlightstack\" className=\"flex-c-m size5 bg4 how1 trans-04 m-r-5\">\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n\n          <a target=\"_blank\" href=\"https://www.youtube.com/channel/UCN6G1t4Tdm-Mj5yHbMlYxAw\" className=\"flex-c-m size5 bg5 how1 trans-04 m-r-5\">\n            <FontAwesomeIcon icon={faYoutube} />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}